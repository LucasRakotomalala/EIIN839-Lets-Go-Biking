//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HeavyClient.Routing {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Station", Namespace="http://schemas.datacontract.org/2004/07/Proxy.Models")]
    [System.SerializableAttribute()]
    public partial class Station : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string addressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int available_bike_standsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int available_bikesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int bike_standsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string contract_nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int numberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HeavyClient.Routing.Position positionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string statusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string address {
            get {
                return this.addressField;
            }
            set {
                if ((object.ReferenceEquals(this.addressField, value) != true)) {
                    this.addressField = value;
                    this.RaisePropertyChanged("address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int available_bike_stands {
            get {
                return this.available_bike_standsField;
            }
            set {
                if ((this.available_bike_standsField.Equals(value) != true)) {
                    this.available_bike_standsField = value;
                    this.RaisePropertyChanged("available_bike_stands");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int available_bikes {
            get {
                return this.available_bikesField;
            }
            set {
                if ((this.available_bikesField.Equals(value) != true)) {
                    this.available_bikesField = value;
                    this.RaisePropertyChanged("available_bikes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int bike_stands {
            get {
                return this.bike_standsField;
            }
            set {
                if ((this.bike_standsField.Equals(value) != true)) {
                    this.bike_standsField = value;
                    this.RaisePropertyChanged("bike_stands");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string contract_name {
            get {
                return this.contract_nameField;
            }
            set {
                if ((object.ReferenceEquals(this.contract_nameField, value) != true)) {
                    this.contract_nameField = value;
                    this.RaisePropertyChanged("contract_name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int number {
            get {
                return this.numberField;
            }
            set {
                if ((this.numberField.Equals(value) != true)) {
                    this.numberField = value;
                    this.RaisePropertyChanged("number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HeavyClient.Routing.Position position {
            get {
                return this.positionField;
            }
            set {
                if ((object.ReferenceEquals(this.positionField, value) != true)) {
                    this.positionField = value;
                    this.RaisePropertyChanged("position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string status {
            get {
                return this.statusField;
            }
            set {
                if ((object.ReferenceEquals(this.statusField, value) != true)) {
                    this.statusField = value;
                    this.RaisePropertyChanged("status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Position", Namespace="http://schemas.datacontract.org/2004/07/Proxy.Models")]
    [System.SerializableAttribute()]
    public partial class Position : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double latitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double longitudeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double latitude {
            get {
                return this.latitudeField;
            }
            set {
                if ((this.latitudeField.Equals(value) != true)) {
                    this.latitudeField = value;
                    this.RaisePropertyChanged("latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double longitude {
            get {
                return this.longitudeField;
            }
            set {
                if ((this.longitudeField.Equals(value) != true)) {
                    this.longitudeField = value;
                    this.RaisePropertyChanged("longitude");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Routing.IRouting")]
    public interface IRouting {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouting/GetAllStations", ReplyAction="http://tempuri.org/IRouting/GetAllStationsResponse")]
        HeavyClient.Routing.Station[] GetAllStations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouting/GetAllStations", ReplyAction="http://tempuri.org/IRouting/GetAllStationsResponse")]
        System.Threading.Tasks.Task<HeavyClient.Routing.Station[]> GetAllStationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouting/GetAllStationsFromCity", ReplyAction="http://tempuri.org/IRouting/GetAllStationsFromCityResponse")]
        HeavyClient.Routing.Station[] GetAllStationsFromCity(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouting/GetAllStationsFromCity", ReplyAction="http://tempuri.org/IRouting/GetAllStationsFromCityResponse")]
        System.Threading.Tasks.Task<HeavyClient.Routing.Station[]> GetAllStationsFromCityAsync(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouting/GetCityName", ReplyAction="http://tempuri.org/IRouting/GetCityNameResponse")]
        string GetCityName(double latitude, double longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouting/GetCityName", ReplyAction="http://tempuri.org/IRouting/GetCityNameResponse")]
        System.Threading.Tasks.Task<string> GetCityNameAsync(double latitude, double longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouting/GetPosition", ReplyAction="http://tempuri.org/IRouting/GetPositionResponse")]
        HeavyClient.Routing.Position GetPosition(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouting/GetPosition", ReplyAction="http://tempuri.org/IRouting/GetPositionResponse")]
        System.Threading.Tasks.Task<HeavyClient.Routing.Position> GetPositionAsync(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouting/GetPath", ReplyAction="http://tempuri.org/IRouting/GetPathResponse")]
        string GetPath(HeavyClient.Routing.Position[] positions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouting/GetPath", ReplyAction="http://tempuri.org/IRouting/GetPathResponse")]
        System.Threading.Tasks.Task<string> GetPathAsync(HeavyClient.Routing.Position[] positions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouting/FindNearestStationFromStart", ReplyAction="http://tempuri.org/IRouting/FindNearestStationFromStartResponse")]
        HeavyClient.Routing.Station FindNearestStationFromStart(double latitude, double longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouting/FindNearestStationFromStart", ReplyAction="http://tempuri.org/IRouting/FindNearestStationFromStartResponse")]
        System.Threading.Tasks.Task<HeavyClient.Routing.Station> FindNearestStationFromStartAsync(double latitude, double longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouting/FindNearestStationFromEnd", ReplyAction="http://tempuri.org/IRouting/FindNearestStationFromEndResponse")]
        HeavyClient.Routing.Station FindNearestStationFromEnd(double latitude, double longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouting/FindNearestStationFromEnd", ReplyAction="http://tempuri.org/IRouting/FindNearestStationFromEndResponse")]
        System.Threading.Tasks.Task<HeavyClient.Routing.Station> FindNearestStationFromEndAsync(double latitude, double longitude);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRoutingChannel : HeavyClient.Routing.IRouting, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RoutingClient : System.ServiceModel.ClientBase<HeavyClient.Routing.IRouting>, HeavyClient.Routing.IRouting {
        
        public RoutingClient() {
        }
        
        public RoutingClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RoutingClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoutingClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoutingClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public HeavyClient.Routing.Station[] GetAllStations() {
            return base.Channel.GetAllStations();
        }
        
        public System.Threading.Tasks.Task<HeavyClient.Routing.Station[]> GetAllStationsAsync() {
            return base.Channel.GetAllStationsAsync();
        }
        
        public HeavyClient.Routing.Station[] GetAllStationsFromCity(string city) {
            return base.Channel.GetAllStationsFromCity(city);
        }
        
        public System.Threading.Tasks.Task<HeavyClient.Routing.Station[]> GetAllStationsFromCityAsync(string city) {
            return base.Channel.GetAllStationsFromCityAsync(city);
        }
        
        public string GetCityName(double latitude, double longitude) {
            return base.Channel.GetCityName(latitude, longitude);
        }
        
        public System.Threading.Tasks.Task<string> GetCityNameAsync(double latitude, double longitude) {
            return base.Channel.GetCityNameAsync(latitude, longitude);
        }
        
        public HeavyClient.Routing.Position GetPosition(string address) {
            return base.Channel.GetPosition(address);
        }
        
        public System.Threading.Tasks.Task<HeavyClient.Routing.Position> GetPositionAsync(string address) {
            return base.Channel.GetPositionAsync(address);
        }
        
        public string GetPath(HeavyClient.Routing.Position[] positions) {
            return base.Channel.GetPath(positions);
        }
        
        public System.Threading.Tasks.Task<string> GetPathAsync(HeavyClient.Routing.Position[] positions) {
            return base.Channel.GetPathAsync(positions);
        }
        
        public HeavyClient.Routing.Station FindNearestStationFromStart(double latitude, double longitude) {
            return base.Channel.FindNearestStationFromStart(latitude, longitude);
        }
        
        public System.Threading.Tasks.Task<HeavyClient.Routing.Station> FindNearestStationFromStartAsync(double latitude, double longitude) {
            return base.Channel.FindNearestStationFromStartAsync(latitude, longitude);
        }
        
        public HeavyClient.Routing.Station FindNearestStationFromEnd(double latitude, double longitude) {
            return base.Channel.FindNearestStationFromEnd(latitude, longitude);
        }
        
        public System.Threading.Tasks.Task<HeavyClient.Routing.Station> FindNearestStationFromEndAsync(double latitude, double longitude) {
            return base.Channel.FindNearestStationFromEndAsync(latitude, longitude);
        }
    }
}
